#!/usr/bin/env python3

import sys
import os
import tempfile
import subprocess
import shutil
import tarfile
import datetime

from argparse import ArgumentParser
from configparser import RawConfigParser

if __name__ == '__main__':
    ap = ArgumentParser()
    ap.add_argument('package_url', help='The package to deploy')
    args = ap.parse_args()
    
    package_url = args.package_url

    print('Downloading %s...' % package_url)

    with tempfile.TemporaryDirectory() as tmp_dir:
        if package_url.startswith('http://') or package_url.startswith('https://'):
            subprocess.check_call(['wget', '--quiet', '--show-progress', package_url], cwd=tmp_dir)
            package_filename = package_url.rsplit('/', 1)[1]
            package_filepath = os.path.join(tmp_dir, package_filename)
        else:
            package_filepath = package_url

        print('Unpacking...')
        tar = tarfile.open(package_filepath, 'r:gz')
        tar.extractall(path=tmp_dir)
        tar.close()

        print('Reading package info...')
        package_ini = os.path.join(tmp_dir, 'package.ini')

        config = RawConfigParser()
        config.optionxform = lambda option: option

        config.add_section('Application')
        config.set('Application', 'description', '')
        config.set('Application', 'homepage', '')
        config.set('Application', 'source homepage', '')
       
        config.add_section('Dependencies')

        config.add_section('Scripts')
        config.set('Scripts', 'build', 'build.sh')
        config.set('Scripts', 'install', 'install.sh')
        config.set('Scripts', 'uninstall', 'uninstall.sh')

        config.add_section('Bin')

        config.read(package_ini)

        title = config['Application']['title']
        version = config['Application']['version']
        description = config['Application']['description']

        build_script = config['Scripts']['build']
        install_script = config['Scripts']['install']
        uninstall_script = config['Scripts']['uninstall']

        install_dir = os.path.expanduser('~/opt')
        target_dir = os.path.join(install_dir, '%s-%s' % (title, version))
        meta_dir = os.path.expanduser('~/.local/share/setup/%s-%s' % (title, version))
        bin_dir = os.path.expanduser('~/.local/bin')
        application_dir = os.path.join(tmp_dir, 'application')

        print('Checking...')
        if os.path.exists(meta_dir):
            print('%s-%s is already installed.' % (title, version))
            exit(0)

        print('Installing %s...' % title)
        env = dict(os.environ)
        env.update({
            'APPLICATION': title,
            'VERSION': version,
            'DESCRIPTION': description,
            'SOURCE': tmp_dir,
            'SOURCE_APPLICATION_DIR': application_dir,
            'TARGET': target_dir,
        })
        
        subprocess.check_call([os.path.join(tmp_dir, install_script)], cwd=tmp_dir, env=env)

        print('Copying application files...')
        if not os.path.exists(install_dir):
            os.makedirs(install_dir)
        if not os.path.exists(target_dir):
            shutil.copytree(application_dir, target_dir)

        print('Copying installation scripts...')
        if not os.path.exists(meta_dir):
            os.makedirs(meta_dir)
        shutil.copy(
            os.path.join(tmp_dir, install_script),
            os.path.join(meta_dir, install_script)
        )

        shutil.copy(
            os.path.join(tmp_dir, uninstall_script),
            os.path.join(meta_dir, uninstall_script)
        )

        print('Linking binaries into %s...' % bin_dir)
        if not os.path.exists(bin_dir):
            os.makedirs(bin_dir)
        for target_bin, bin_bin in list(config['Bin'].items()):
            target_bin = os.path.join(target_dir, target_bin)
            bin_bin = os.path.join(bin_dir, bin_bin)
            print('Linking %s -> %s' % (bin_bin, target_bin))
            if os.path.exists(bin_bin):
                print('Remove %s' % bin_bin)
                os.remove(bin_bin)
            os.symlink(target_bin, bin_bin)

        print('Writing package.ini...')
        config.add_section('Installation')
        config.set('Installation', 'source', package_url)
        config.set('Installation', 'target', target_dir)
        config.set('Installation', 'timestamp', datetime.datetime.now().isoformat())
        with open(os.path.join(meta_dir, 'package.ini'), 'w') as f:
            config.write(f)

        print('Installed package %s-%s' % (title, version))
